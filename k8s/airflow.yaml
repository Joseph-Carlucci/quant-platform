apiVersion: apps/v1
kind: Deployment
metadata:
  name: airflow
  namespace: quant-platform
  labels:
    app: airflow
spec:
  replicas: 1
  selector:
    matchLabels:
      app: airflow
  template:
    metadata:
      labels:
        app: airflow
    spec:
      initContainers:
      - name: airflow-init
        image: apache/airflow:2.8.0-python3.11
        command:
        - /bin/bash
        - -c
        - |
          pip install pandas psycopg2-binary sqlalchemy requests yfinance numpy
          airflow db init
          airflow users create --username "$AIRFLOW_ADMIN_USERNAME" --firstname Admin --lastname User --role Admin --email "$AIRFLOW_ADMIN_EMAIL" --password "$AIRFLOW_ADMIN_PASSWORD" || true
        env:
        - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
          value: "postgresql+psycopg2://postgres:quant_password@postgres:5432/airflow"
        - name: POLYGON_API_KEY
          valueFrom:
            secretKeyRef:
              name: quant-secrets
              key: polygon-api-key
        - name: AIRFLOW_ADMIN_USERNAME
          valueFrom:
            secretKeyRef:
              name: quant-secrets
              key: airflow-admin-username
        - name: AIRFLOW_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: quant-secrets
              key: airflow-admin-password
        - name: AIRFLOW_ADMIN_EMAIL
          valueFrom:
            secretKeyRef:
              name: quant-secrets
              key: airflow-admin-email
        envFrom:
        - configMapRef:
            name: quant-config
        volumeMounts:
        - name: dags
          mountPath: /opt/airflow/dags
      containers:
      - name: airflow-webserver
        image: apache/airflow:2.8.0-python3.11
        ports:
        - containerPort: 8080
        command:
        - /bin/bash
        - -c
        - |
          pip install pandas psycopg2-binary sqlalchemy requests yfinance numpy
          airflow webserver
        env:
        - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
          value: "postgresql+psycopg2://postgres:quant_password@postgres:5432/airflow"
        - name: POLYGON_API_KEY
          valueFrom:
            secretKeyRef:
              name: quant-secrets
              key: polygon-api-key
        envFrom:
        - configMapRef:
            name: quant-config
        volumeMounts:
        - name: dags
          mountPath: /opt/airflow/dags
        - name: logs
          mountPath: /opt/airflow/logs
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 120
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 10
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1.5Gi"
            cpu: "500m"
      - name: airflow-scheduler
        image: apache/airflow:2.8.0-python3.11
        command:
        - /bin/bash
        - -c
        - |
          pip install pandas psycopg2-binary sqlalchemy requests yfinance numpy
          airflow scheduler
        env:
        - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
          value: "postgresql+psycopg2://postgres:quant_password@postgres:5432/airflow"
        - name: POLYGON_API_KEY
          valueFrom:
            secretKeyRef:
              name: quant-secrets
              key: polygon-api-key
        envFrom:
        - configMapRef:
            name: quant-config
        volumeMounts:
        - name: dags
          mountPath: /opt/airflow/dags
        - name: logs
          mountPath: /opt/airflow/logs
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1.5Gi"
            cpu: "500m"
      volumes:
      - name: dags
        configMap:
          name: airflow-dags
      - name: logs
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: airflow
  namespace: quant-platform
  labels:
    app: airflow
spec:
  ports:
  - port: 8080
    targetPort: 8080
    name: http
  selector:
    app: airflow
  type: ClusterIP  # Internal access only - use port-forward or ingress for external access 