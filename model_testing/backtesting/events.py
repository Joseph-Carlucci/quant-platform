from abc import ABC, abstractmethod
from enum import Enum
from dataclasses import dataclass
from typing import Optional, Dict, Any
import pandas as pd

class EventType(Enum):
    MARKET = "MARKET"
    SIGNAL = "SIGNAL"  
    ORDER = "ORDER"
    FILL = "FILL"

class OrderType(Enum):
    MARKET = "MARKET"
    LIMIT = "LIMIT"
    STOP = "STOP"
    STOP_LIMIT = "STOP_LIMIT"

class OrderDirection(Enum):
    BUY = "BUY"
    SELL = "SELL"

@dataclass
class Event(ABC):
    """
    Base class for all events in the event-driven backtesting system.
    """
    type: EventType
    timestamp: pd.Timestamp

@dataclass  
class MarketEvent(Event):
    """
    Market data event containing OHLCV data for all symbols.
    """
    data: Dict[str, Dict[str, float]]  # {symbol: {open, high, low, close, volume}}
    
    def __post_init__(self):
        self.type = EventType.MARKET
        
    def get_price(self, symbol: str, price_type: str = "close") -> Optional[float]:
        """Get price for a specific symbol and price type."""
        if symbol in self.data and price_type in self.data[symbol]:
            return self.data[symbol][price_type]
        return None
        
    def get_symbols(self) -> list:
        """Get list of available symbols."""
        return list(self.data.keys())

@dataclass
class SignalEvent(Event):
    """
    Signal event generated by a strategy.
    """
    symbol: str
    signal_type: int  # 1 for buy, -1 for sell, 0 for hold
    strength: float = 1.0
    price: Optional[float] = None
    metadata: Optional[Dict[str, Any]] = None
    
    def __post_init__(self):
        self.type = EventType.SIGNAL

@dataclass
class OrderEvent(Event):
    """
    Order event to be sent to execution handler.
    """
    symbol: str
    order_type: OrderType
    quantity: float
    direction: OrderDirection
    price: Optional[float] = None  # For limit orders
    stop_price: Optional[float] = None  # For stop orders
    metadata: Optional[Dict[str, Any]] = None
    
    def __post_init__(self):
        self.type = EventType.ORDER
        
    def is_buy(self) -> bool:
        """Check if this is a buy order."""
        return self.direction == OrderDirection.BUY
        
    def is_sell(self) -> bool:
        """Check if this is a sell order."""
        return self.direction == OrderDirection.SELL

@dataclass
class FillEvent(Event):
    """
    Fill event representing executed trade.
    """
    symbol: str
    quantity: float
    direction: OrderDirection
    fill_price: float
    commission: float = 0.0
    slippage: float = 0.0
    order_id: Optional[str] = None
    metadata: Optional[Dict[str, Any]] = None
    
    def __post_init__(self):
        self.type = EventType.FILL
        
    def get_cost(self) -> float:
        """Get total cost of the fill (including commission)."""
        return abs(self.quantity * self.fill_price) + self.commission
        
    def get_net_proceeds(self) -> float:
        """Get net proceeds (for sells) or cost (for buys)."""
        gross = self.quantity * self.fill_price
        if self.direction == OrderDirection.SELL:
            return gross - self.commission
        else:
            return -(gross + self.commission)