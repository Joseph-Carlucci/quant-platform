-- Unified End-to-End Database Schema
-- This schema supports the complete workflow from data ingestion to performance testing
-- Designed to be simple, consistent, and modular for the quant platform

-- Connect to quant_data database
\c quant_data;

-- =======================
-- CORE DATA TABLES
-- =======================

-- Market data from external sources (Polygon API)
CREATE TABLE IF NOT EXISTS market_data (
    id BIGSERIAL PRIMARY KEY,
    symbol VARCHAR(10) NOT NULL,
    date DATE NOT NULL,
    open_price DECIMAL(12,4) NOT NULL,
    high_price DECIMAL(12,4) NOT NULL,
    low_price DECIMAL(12,4) NOT NULL,
    close_price DECIMAL(12,4) NOT NULL,
    volume BIGINT NOT NULL,
    vwap DECIMAL(12,4),
    transactions INTEGER,
    data_source VARCHAR(50) DEFAULT 'polygon',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    UNIQUE(symbol, date)
);

-- Trading universe - actively traded symbols
CREATE TABLE IF NOT EXISTS trading_universe (
    id SERIAL PRIMARY KEY,
    symbol VARCHAR(10) NOT NULL UNIQUE,
    company_name VARCHAR(255),
    sector VARCHAR(100),
    industry VARCHAR(100),
    market_cap_category VARCHAR(20), -- 'large', 'mid', 'small', 'micro'
    is_active BOOLEAN DEFAULT true,
    added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Feature store for model inputs (flexible JSON-based storage)
CREATE TABLE IF NOT EXISTS feature_store (
    id BIGSERIAL PRIMARY KEY,
    symbol VARCHAR(10) NOT NULL,
    date DATE NOT NULL,
    feature_set VARCHAR(50) NOT NULL,  -- e.g., 'technical_v1', 'momentum_v1'
    features JSONB NOT NULL,           -- Flexible feature storage
    target_variable DECIMAL(10,6),     -- For supervised learning
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    UNIQUE(symbol, date, feature_set)
);

-- =======================
-- MODEL FRAMEWORK TABLES
-- =======================

-- Model registry and metadata
CREATE TABLE IF NOT EXISTS models (
    id SERIAL PRIMARY KEY,
    model_name VARCHAR(100) UNIQUE NOT NULL,
    model_version VARCHAR(20) NOT NULL,
    model_type VARCHAR(50) NOT NULL, -- 'momentum', 'mean_reversion', 'ml_classifier'
    strategy_class VARCHAR(200) NOT NULL, -- Python class path
    parameters JSONB NOT NULL,
    description TEXT,
    created_by VARCHAR(100),
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Model execution runs and status
CREATE TABLE IF NOT EXISTS model_runs (
    id BIGSERIAL PRIMARY KEY,
    model_id INTEGER REFERENCES models(id),
    run_date DATE NOT NULL,
    start_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    end_time TIMESTAMP,
    status VARCHAR(20) DEFAULT 'running', -- 'running', 'completed', 'failed'
    universe_size INTEGER,
    signals_generated INTEGER DEFAULT 0,
    error_message TEXT,
    execution_metadata JSONB,
    
    UNIQUE(model_id, run_date)
);

-- Trading signals generated by models
CREATE TABLE IF NOT EXISTS signals (
    id BIGSERIAL PRIMARY KEY,
    model_run_id BIGINT REFERENCES model_runs(id),
    model_id INTEGER REFERENCES models(id),
    ticker VARCHAR(10) NOT NULL,
    signal_date DATE NOT NULL,
    signal_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    signal_type INTEGER NOT NULL, -- -1 (sell), 0 (hold), 1 (buy)
    signal_strength DECIMAL(5,4) CHECK (signal_strength >= 0 AND signal_strength <= 1),
    target_price DECIMAL(12,4),
    confidence_score DECIMAL(5,4),
    signal_metadata JSONB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- =======================
-- PERFORMANCE FRAMEWORK TABLES
-- =======================

-- Model performance metrics (computed by performance testing)
CREATE TABLE IF NOT EXISTS model_performance (
    id BIGSERIAL PRIMARY KEY,
    model_id INTEGER NOT NULL REFERENCES models(id),
    run_date DATE NOT NULL,
    evaluation_date DATE NOT NULL,
    
    -- Basic performance metrics
    total_return DECIMAL(10,4),
    avg_return DECIMAL(10,6),
    win_rate DECIMAL(5,4),
    
    -- Risk metrics
    sharpe_ratio DECIMAL(8,4),
    max_drawdown DECIMAL(8,4),
    volatility DECIMAL(8,4),
    
    -- Advanced metrics
    profit_factor DECIMAL(8,4),
    prediction_accuracy DECIMAL(5,4),
    
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    UNIQUE(model_id, run_date)
);

-- Daily performance reports comparing all models
CREATE TABLE IF NOT EXISTS performance_reports (
    id SERIAL PRIMARY KEY,
    report_date DATE NOT NULL UNIQUE,
    total_models INTEGER NOT NULL,
    avg_return_all_models DECIMAL(10,6),
    best_model_id INTEGER REFERENCES models(id),
    worst_model_id INTEGER REFERENCES models(id),
    report_data JSONB NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- =======================
-- LEGACY COMPATIBILITY TABLES
-- (for existing DAGs - will be migrated)
-- =======================

-- Legacy trading_signals table (used by performance testing DAG)
CREATE TABLE IF NOT EXISTS trading_signals (
    signal_id BIGSERIAL PRIMARY KEY,
    model_id VARCHAR(100) NOT NULL,
    model_name VARCHAR(255) NOT NULL,
    model_type VARCHAR(50) NOT NULL,
    version VARCHAR(20) NOT NULL,
    symbol VARCHAR(10) NOT NULL,
    signal_type VARCHAR(10) NOT NULL,
    signal_strength DECIMAL(5,3),
    confidence_score DECIMAL(5,3),
    price_target DECIMAL(10,4),
    stop_loss DECIMAL(10,4),
    expected_return DECIMAL(8,4),
    max_position_size DECIMAL(6,3),
    signal_date DATE NOT NULL,
    expiry_date DATE,
    parameters JSONB,
    input_features JSONB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_signal_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- =======================
-- PERFORMANCE INDEXES
-- =======================

-- Market data indexes
CREATE INDEX IF NOT EXISTS idx_market_data_symbol_date ON market_data(symbol, date DESC);
CREATE INDEX IF NOT EXISTS idx_market_data_date ON market_data(date DESC);
CREATE INDEX IF NOT EXISTS idx_market_data_created_at ON market_data(created_at DESC);

-- Feature store indexes
CREATE INDEX IF NOT EXISTS idx_feature_store_symbol_date ON feature_store(symbol, date DESC);
CREATE INDEX IF NOT EXISTS idx_feature_store_feature_set ON feature_store(feature_set, date DESC);

-- Model and signals indexes
CREATE INDEX IF NOT EXISTS idx_models_active ON models(is_active) WHERE is_active = true;
CREATE INDEX IF NOT EXISTS idx_model_runs_date ON model_runs(run_date DESC);
CREATE INDEX IF NOT EXISTS idx_signals_model_date ON signals(model_id, signal_date DESC);
CREATE INDEX IF NOT EXISTS idx_signals_ticker_date ON signals(ticker, signal_date DESC);

-- Performance indexes
CREATE INDEX IF NOT EXISTS idx_model_performance_model_date ON model_performance(model_id, run_date DESC);
CREATE INDEX IF NOT EXISTS idx_performance_reports_date ON performance_reports(report_date DESC);

-- Trading universe indexes
CREATE INDEX IF NOT EXISTS idx_trading_universe_active ON trading_universe(is_active) WHERE is_active = true;

-- Legacy signals indexes (for compatibility)
CREATE INDEX IF NOT EXISTS idx_trading_signals_model_date ON trading_signals(model_id, signal_date DESC);
CREATE INDEX IF NOT EXISTS idx_trading_signals_created_at ON trading_signals(created_at DESC);

-- =======================
-- SAMPLE DATA FOR TESTING
-- =======================

-- Insert sample trading universe
INSERT INTO trading_universe (symbol, company_name, sector, industry, market_cap_category, is_active) VALUES
('AAPL', 'Apple Inc.', 'Technology', 'Consumer Electronics', 'large', true),
('GOOGL', 'Alphabet Inc.', 'Technology', 'Internet Services', 'large', true),
('MSFT', 'Microsoft Corporation', 'Technology', 'Software', 'large', true),
('AMZN', 'Amazon.com Inc.', 'Consumer Discretionary', 'E-commerce', 'large', true),
('TSLA', 'Tesla Inc.', 'Consumer Discretionary', 'Electric Vehicles', 'large', true),
('NVDA', 'NVIDIA Corporation', 'Technology', 'Semiconductors', 'large', true),
('META', 'Meta Platforms Inc.', 'Technology', 'Social Media', 'large', true),
('NFLX', 'Netflix Inc.', 'Communication Services', 'Streaming', 'large', true),
('AMD', 'Advanced Micro Devices Inc.', 'Technology', 'Semiconductors', 'large', true),
('CRM', 'Salesforce Inc.', 'Technology', 'Cloud Software', 'large', true)
ON CONFLICT (symbol) DO NOTHING;

-- Insert sample model configuration
INSERT INTO models (
    model_name, model_version, model_type, strategy_class, 
    parameters, description, created_by, is_active
) VALUES (
    'enhanced_momentum_v1',
    '1.0.0',
    'momentum',
    'models.strategies.momentum.enhanced_momentum.EnhancedMomentumStrategy',
    '{"short_ma_period": 10, "long_ma_period": 20, "rsi_period": 14, "rsi_lower": 30, "rsi_upper": 70, "volume_ma_period": 20, "momentum_period": 5, "min_volume_ratio": 1.2, "volatility_lookback": 20, "max_position_size": 0.05, "min_confidence": 0.4}',
    'Enhanced momentum strategy with multi-factor confirmation',
    'quant-team',
    true
) ON CONFLICT (model_name) DO NOTHING;

-- Grant permissions to quant_user
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO quant_user;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO quant_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO quant_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO quant_user; 