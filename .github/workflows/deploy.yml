name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch: # Allow manual triggering

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER_NAME: quant-platform
  NAMESPACE: quant-platform

jobs:
  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
        
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}
        
    - name: Verify cluster connection
      run: |
        kubectl get nodes
        kubectl get namespaces
        
    - name: Create Secrets from GitHub
      run: |
        # Create production secrets directly from GitHub repository secrets
        kubectl create secret generic quant-secrets \
          --from-literal=postgres-password="${{ secrets.POSTGRES_PASSWORD }}" \
          --from-literal=pgadmin-password="${{ secrets.PGADMIN_PASSWORD }}" \
          --from-literal=pgadmin-email="${{ secrets.PGADMIN_EMAIL }}" \
          --from-literal=polygon-api-key="${{ secrets.POLYGON_API_KEY }}" \
          --from-literal=airflow-admin-username="${{ secrets.AIRFLOW_ADMIN_USERNAME }}" \
          --from-literal=airflow-admin-password="${{ secrets.AIRFLOW_ADMIN_PASSWORD }}" \
          --from-literal=airflow-admin-email="${{ secrets.AIRFLOW_ADMIN_EMAIL }}" \
          --namespace=${{ env.NAMESPACE }} \
          --dry-run=client -o yaml | kubectl apply -f -
    
    - name: Create ConfigMaps
      run: |
        # Create Airflow configuration
        kubectl create configmap quant-config \
          --from-literal=POSTGRES_USER="quant_user" \
          --from-literal=POSTGRES_DB="quant_data" \
          --from-literal=AIRFLOW__CORE__EXECUTOR="LocalExecutor" \
          --from-literal=AIRFLOW__CORE__LOAD_EXAMPLES="false" \
          --from-literal=AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION="false" \
          --from-literal=AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL="30" \
          --from-literal=AIRFLOW__WEBSERVER__EXPOSE_CONFIG="true" \
          --from-literal=AIRFLOW__WEBSERVER__WARN_DEPLOYMENT_EXPOSURE="false" \
          --from-literal=AIRFLOW__WEBSERVER__SECRET_KEY="quant_platform_secret_key_2024" \
          --namespace=${{ env.NAMESPACE }} \
          --dry-run=client -o yaml | kubectl apply -f -
        
        # Update DAGs ConfigMap
        kubectl create configmap airflow-dags \
          --from-file=dags/ \
          --namespace=${{ env.NAMESPACE }} \
          --dry-run=client -o yaml | kubectl apply -f -
          
        # Update DB init script
        kubectl create configmap db-init-script \
          --from-file=init-db.sql \
          --namespace=${{ env.NAMESPACE }} \
          --dry-run=client -o yaml | kubectl apply -f -
          
    - name: Deploy Infrastructure
      run: |
        # Deploy in order of dependencies
        kubectl apply -f k8s/postgres.yaml
        kubectl apply -f k8s/redis.yaml
        kubectl apply -f k8s/airflow.yaml
        
    - name: Wait for deployments to be ready
      run: |
        echo "Waiting for PostgreSQL to be ready..."
        kubectl wait --for=condition=available --timeout=300s deployment/postgres -n ${{ env.NAMESPACE }}
        
        echo "Waiting for Redis to be ready..."
        kubectl wait --for=condition=available --timeout=300s deployment/redis -n ${{ env.NAMESPACE }}
        
        echo "Waiting for Airflow to be ready..."
        kubectl wait --for=condition=available --timeout=600s deployment/airflow -n ${{ env.NAMESPACE }}
        
    - name: Update DAGs
      run: |
        echo "‚úÖ DAGs updated via ConfigMap"
        echo "üìù Airflow will auto-detect changes within 30 seconds"
        echo "üîó Connect with ./connect-prod.sh to verify in Airflow UI"
        echo "üîß Secrets updated for proper authentication"
        
    - name: Update Airflow admin user
      run: |
        echo "üîÑ Updating Airflow admin user with latest credentials..."
        
        # Wait for Airflow to be ready
        kubectl wait --for=condition=available --timeout=600s deployment/airflow -n ${{ env.NAMESPACE }}
        
        # Get the Airflow pod name
        AIRFLOW_POD=$(kubectl get pods -n ${{ env.NAMESPACE }} -l app=airflow -o jsonpath='{.items[0].metadata.name}')
        
        # Delete existing admin user if it exists
        kubectl exec $AIRFLOW_POD -c airflow-webserver -n ${{ env.NAMESPACE }} -- airflow users delete --username admin || echo "No existing admin user to delete"
        
        # Restart Airflow to recreate admin user with new credentials
        kubectl rollout restart deployment/airflow -n ${{ env.NAMESPACE }}
        kubectl rollout status deployment/airflow -n ${{ env.NAMESPACE }} --timeout=600s
        
    - name: Get access information
      run: |
        echo "=== Deployment Complete ==="
        echo "üéâ Your Quantitative Research Platform is LIVE!"
        echo ""
        echo "üîí Security Notice: This deployment uses ClusterIP services for security."
        echo "   Access services via port-forwarding for secure connections."
        echo ""
        echo "üìä Airflow UI Access:"
        echo "   kubectl port-forward -n ${{ env.NAMESPACE }} service/airflow 8080:8080"
        echo "   Then visit: http://localhost:8080"
        echo "   Username: Set via AIRFLOW_ADMIN_USERNAME secret"
        echo "   Password: Set via AIRFLOW_ADMIN_PASSWORD secret"
        echo ""
        echo "üêò PostgreSQL Direct Access:"
        echo "   kubectl port-forward -n ${{ env.NAMESPACE }} service/postgres 15432:5432"
        echo "   Then connect with your preferred PostgreSQL client:"
        echo "   Host: localhost, Port: 15432, User: postgres"
        echo "   Password: Set via POSTGRES_PASSWORD secret"
        echo ""
        echo "‚ö†Ô∏è  Remember to set your GitHub repository secrets for production!"
        
    - name: Run health checks
      run: |
        echo "=== Health Check Results ==="
        kubectl get pods -n ${{ env.NAMESPACE }}
        echo ""
        echo "=== Resource Usage ==="
        kubectl top pods -n ${{ env.NAMESPACE }} || echo "Metrics server not available"

  notify:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "‚úÖ Deployment succeeded!"
          echo "The quantitative research platform has been updated in production."
        else
          echo "‚ùå Deployment failed!"
          echo "Please check the workflow logs for details."
        fi 